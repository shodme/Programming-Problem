//在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
ListNode* deleteDuplication(ListNode* pHead)
{
	// 如果链表为空
	if (pHead == nullptr)
		return pHead;
	ListNode* Head = pHead;
    ListNode* preNode = pHead;
	ListNode* pNext;
	int temp = 0;

	temp = pHead->val;
	while (pHead->next)
	{
		// 如果是头结点,相等
		if (temp == pHead->next->val&&pHead == Head)
		{

			while (pHead->next&&temp == pHead->next->val)
			{
				pHead = pHead->next;
			}
			if (pHead->next)
			{	
                pHead = pHead->next;
                Head = pHead;
                temp = pHead->val;
            }
			else
				return nullptr;

		}
		// 不是头结点,相等
		else if (temp == pHead->next->val)
		{
			pNext = pHead->next;
			preNode->next = pNext->next;
			pHead = preNode;
			//temp = pHead->val;
		}
		// 如果不相等
		else if (temp != pHead->next->val)
		{
			temp = pHead->next->val;
            preNode = pHead;
			pHead = pHead->next;
		}
	}

	return Head;
}
};