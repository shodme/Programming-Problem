
// 面试题3（二）：不修改数组找出重复的数字
// 题目：在一个长度为n+1的数组里的所有数字都在1到n的范围内，所以数组中至
// 少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的
// 数组。例如，如果输入长度为8的数组{2, 3, 5, 4, 3, 2, 6, 7}，那么对应的
// 输出是重复的数字2或者3。



// 解法1
class Solution {
public:
    // Parameters:
    //        numbers:     an array of integers
    //        length:      the length of array numbers
    //        duplication: (Output) the duplicated number in the array number
    // Return value:       true if the input is valid, and there are some duplications in the array number
    //                     otherwise false
    bool duplicate(int numbers[], int length, int* duplication) {
		
		// 判断数组是否为空
		if(numbers==nullptr||length<=0)
		{
			return false;
		}
		// 判断数字是否满足要求
		for(int i=0;i<length;++i)
		{
			if(numbers[i]<1||numbers[i]>length)
			{
				return false;
			}			
		}
		
		int hashtable[length];
		for(int i=0;i<length;++i)
		{
			hashtable[i] = 0;
		}		
		bool flag = false;
		
		for(int i=0;i<length;++i)
		{
			if(hashtable[numbers[i]-1]==0)
			{
				
				hashtable[numbers[i]-1]++;
			}
			else if(hashtable[numbers[i]-1]==1)
			{
				flag = true;
				*duplication = numbers[i];
				hashtable[numbers[i]-1]++;
			}
			else
			{
				
				hashtable[numbers[i]-1]++;
			}
		}
		
		return false;
    }
};

// 解法2：二分查找法
// 这种方法将数组一分为二，首先查找1~n/2中数字个数是否超过1~n/2的大小；如果没有，则肯定在n/2~n之间，然后二分查找，总会找到
// 但是这个方法有个bug，有{ 2, 2, 3, 4, 5, 5, 6 ,6 }这种就会找不到
class Solution {
public:

    int duplicate(int numbers[], int length) {
		
		if(numbers==nullptr||length<=0)
			return false;
		
		int start = 1;
		int end = length - 1;
		while(end>=start)
		{
			int middle = (end-start)>>1+start;//>>是向下取整
			int count = coutRange(numbers,length,start,middle);
			
			if(end==start)
			{
				if(count>1)
				{
					return start;
				}
				else
				{
					break;
				}
			}
			
			if(count>(middle-start+1))
			{
				end = middle;
			}
			else
			{
				start = middle+1;
			}
			
		}
		
		return -1;
    }
};



int coutRange(const int *numbers,int length,int start,int end)
{
	if(length==nullptr)
	{
		return 0;
	}
	int count = 0;
	
	for(int i==0;i<length;i++)
	{
		
		if(numbers[i]>=start||numbers[i]<=end)
		{
			count++;
		}
	}
	return count;
}