// 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。


// 解法1：非递归
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(pHead1==nullptr)
            return pHead2;
        else if(pHead1==nullptr)
            return pHead1;
        
        ListNode* Head;
        ListNode* H;
        Head = (ListNode*)malloc(sizeof(struct ListNode ));
        Head->next = nullptr;
        H = Head;
        
        while(pHead1&&pHead2)
        {
            if(pHead1->val>pHead2->val)
            {
                Head->next = pHead2;
                pHead2 = pHead2->next;
                Head = Head->next;
                Head->next = nullptr;
            }
            else
            {
                Head->next = pHead1;
                pHead1 = pHead1->next;
                Head = Head->next;
                Head->next = nullptr;
            }
            
        }
        
        if(pHead1)
        {
            Head->next = pHead1;
        }
        if(pHead2)
        {
            Head->next = pHead2;            
        }
        
        
        return H->next;
    }
};

// 解法2：递归

class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(pHead1==nullptr)
            return pHead2;
        else if(pHead2==nullptr)
            return pHead1;


        ListNode* pMergeHead = nullptr;

        if(pHead1->val<pHead2->val)
        {
            pMergeHead = pHead1;
            pMergeHead->next = Merge(pHead1->next,pHead2);

        }
        else
        {
            pMergeHead = pHead2;
            pMergeHead->next = Merge(pHead2->next,pHead1);	
        }

        return pMergeHead;
    }
};