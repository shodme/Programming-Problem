

// 解法1：
void Print1ToMaxOfNDigits(int n)
{
	if(n<=0)
		return;
	char *number = new char[n+1];
	
	memset(number,'0',n);
	number[n] = '\0';
	
	bool flag = 1;
	while(!flag)
	{
		flag = Increment(number);
		PrintNumber(number);
	}
	
	delete [] number;
}


bool Increment(char* number)
{
	bool isOverflow = 0;
	int nTakeOver = 0;// 进位标志
	int nLength = strlen(number);
	for(int i=nLength-1;i>=0;i--)
	{
		int nSum = number[i] - '0' + nTakeOver;
		if(nLength-1==i)
		{
			nSum++;
		}
		if(nSum>=10)
		{
			
			if(i==0)
				isOverflow = 1;
			else
			{
				nTakeOver = 1;
				nSum -= 10;
				number[i] ='0' + nSum;
				
			}
		}
		else
		{
			number[i] ='0' + nSum;
			break;
		}
	}
	
	return isOverflow;
	
}



void PrintNumber(char* number)
{
	bool isBeginning0 = true;
	
	int nLength = strlen(number);
	
	for(int i=0;i<nLength;i++)
	{
		if(isBeginning0&&number[i]!='0')
			isBeginning0 = 0;
		
		if(!isBeginning0)
		{
			
			printf("%c",number[i]);
		}
		
	}	
	printf("\t");
	
}

// 解法2：

void Print1ToMaxOfNDigits(int n)
{
	
	if(n<=0)
	{
		return;
	}
	
	char *number = new char[n+1];
	number[n] = '\0';
	
	for(int i=0;i<10;i++)
	{
		number[0] = i + '0';
		Print1ToMaxOfNDigitsRecursively(number,n,0);
	}
	
	delete [] number;
}


void Print1ToMaxOfNDigitsRecursively(char *number,int length,int index)
{
	if(index==length-1)
	{
		PrintNumber(number);
		return;
	}
	
	for(int i=0;i<10;i++)
	{
		number[index+1] = i +'0';
		Print1ToMaxOfNDigitsRecursively(number,length,index+1);
		
	}
}


void PrintNumber(char* number)
{
	bool isBeginning0 = true;
	
	int nLength = strlen(number);
	
	for(int i=0;i<nLength;i++)
	{
		if(isBeginning0&&number[i]!='0')
			isBeginning0 = 0;
		
		if(!isBeginning0)
		{
			
			printf("%c",number[i]);
		}
		
	}	
	printf("\t");
	
}