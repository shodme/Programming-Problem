
// 动态规划

int maxProductAfterCutting_solution1(int length)
{
	if(length<2)
		return 1;
	if(length==2)
		return 1;
	if(length==3)
		return 2;

	int *products = new int[length+1];// 就是为了多补一个零便于理解
	
	products[0] = 0;// 其实没用，加上便于理解，数组从1开始
	products[1] = 1;
	products[2] = 2;
	products[3] = 3;
	
	int max = 0;
	
	// 从4开始，最优值才存入products，之前的都直接return了
	for(int i=4;i<=length;++i)
	{
		max = 0;
		for(int j=1;j<=i/2;++j)
		{
			int product = products[j] * products[i-j];
			if(max<product)
				max = product;
			// products[i] = max;
		}
		products[i] = max;
		
	}
	
	max = products[length];
	
	delete [] products;
	
	
	return max;
}


// 贪婪算法


int maxProductAfterCutting_solution2(int length)
{
	
	if(length<2)
		return 1;
	if(length==2)
		return 1;
	if(length==3)
		return 2;	
	
	
	
	int timesOf3 = length / 3;
	
	if(length- timesOf3*(length-1)==1)
		timesOf3 -= 1;
	
	int timesOf2 = (length - timesOf3*3) / 2;
	
	return (int)(pow(3,timesOf3))*(int)pow((2,timesOf2));
}