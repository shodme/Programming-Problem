// 请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串"+100","5e2","-123","3.1416"和"-1E-16"都表示数值。 但是"12e","1a3.14","1.2.3","+-5"和"12e+4.3"都不是。

// 解法1
class Solution {
public:
    bool isNumeric(char* string)
    {
        if(string==nullptr)
            return false;
        
        // 先判断是否有正负号
        if(*string=='-'||*string=='+')
            string++;
        
       // 两种形式1.  A[.[B]][e|EC]  2.  .B[e|EC]
       // 判断是否是第二种形式 
       if(*string=='.')
       {
           string++;
           unnum(&string);
       }
       else
       // 如果是第一种形式
       {
           unnum(&string);  
           if(*string=='.')
               string++;
           unnum(&string);
       }
        
       // 判断[e|E]
       if(*string=='e'|*string=='E')
       {
            string++;
            if(*string=='\0')
                return false;
            // 再判断是否有正负号
            if(*string=='-'||*string=='+')
                string++;
        
            unnum(&string); 
       }
        
        if(*string=='\0')
            return true;
        
        return false;
    }

	void unnum(char** string)
	{
		while(**string!='\0'&&**string>='0'&&**string<='9')
		   (*string)++;  		
		
	}
	
};

// 解答2

bool isNumeric(const char* str)
{
	if(str=nullptr)
		return false;
	
	bool numeric = scanInteger(&str);
	
	if(*str=='.')
	{
		str++;
		
		numeric = scanUnsignedInteger(&str)||numeric;
		
		
	}
	if(*str=='E'||*str=='e')
	{
		str++;
		numeric = scanInteger(&str)&&numeric;
		
		
	}
	
	
	return numeric&&str=='\0';
}



bool scanInteger(char** str)
{
	if(**str=='+'||****str=='-')
		(*str)++;
	return scanUnsignedInteger(str);
	
}


bool scanUnsignedInteger(const char** str)
{
	const char* before = *str;
	while(**str!='\0'&&**str>='0'&&**str<='0')
		(*str)++;
	return *str>before;
}