/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        
        ListNode* H = (ListNode*)malloc(sizeof(struct ListNode));
        ListNode* Head = H;
		ListNode* L2 = l2;
		ListNode* L1 = l1;
        int temp = 0;
		int flag = 0;// 进位标志
	
		
        if(l1->next==NULL&&l2->next==NULL)
        {
            temp = l2->val + l1->val;
            if(temp>=10)
            {
                l2->val = temp % 10;
                ListNode* T = (ListNode*)malloc(sizeof(struct ListNode));
                T->next = NULL;
                T->val = 1;
                l2->next = T;		
            }
            else
            {
                l2->val = temp;
            }
            return L2;
            
        }
        
		while(l1&&l2)
		{
			
			ListNode* Node = (ListNode*)malloc(sizeof(struct ListNode));
            Node->next = NULL;
			
			temp = l2->val + l1->val + flag;
			flag = 0;
			if(temp>=10)
			{
				Node->val = temp % 10;		
				flag = 1;		
			}
            else
			{
				Node->val = temp;
				
			}
            H->next = Node;
            H = H->next;
			l1 = l1->next;
			l2 = l2->next;	
		}
		
		if(l1==NULL&&l2==NULL)
		{
			if(flag)
			{
				 ListNode* T = (ListNode*)malloc(sizeof(struct ListNode));
				T->next = NULL;
				T->val = 1;
				H->next = T;	
			}
	
		}   

        if(l1)
        {
			L1 = l1;
            if(flag)// 有进位
			{
				temp = l1->val + flag;
				
				if(temp>=10)
				{
					l1->val = temp % 10;
					// l1是否存在下一位
					if(l1->next)
					{
						while(l1->next&&temp>=10)
						{
							temp = l1->next->val + 1;
							l1->next->val = temp % 10;
							l1 = l1->next;
						}				
                        if(!l1->next&&temp>=10)
                        {
                            ListNode* T = (ListNode*)malloc(sizeof(struct ListNode));
                            T->next = NULL;
                            T->val = 1;
                            l1->next = T;		
                        }
					}
					else
					{
						ListNode* T = (ListNode*)malloc(sizeof(struct ListNode));
						T->next = NULL;
						T->val = 1;
						l1->next = T;					
					}	
		
				}
				else
				{
					l1->val = temp;
				}

			}

			H->next = L1;
        }
		
        if(l2)
        {
			L2 = l2;
            if(flag)// 有进位
			{
				temp = l2->val + flag;
				
				if(temp>=10)
				{
					l2->val = temp % 10;
					// l1是否存在下一位
					if(l2->next)
					{
						while(l2->next&&temp>=10)
						{
							temp = l2->next->val + 1;
							l2->next->val = temp % 10;
							l2 = l2->next;
						}				
                        if(!l2->next&&temp>=10)
                        {
                            ListNode* T = (ListNode*)malloc(sizeof(struct ListNode));
                            T->next = NULL;
                            T->val = 1;
                            l2->next = T;		
                        }
					}
					else
					{
						ListNode* T = (ListNode*)malloc(sizeof(struct ListNode));
						T->next = NULL;
						T->val = 1;
						l2->next = T;					
					}	
		
				}
				else
				{
					l2->val = temp;
				}

			}

			H->next = L2;
        }
		
        return Head->next;
        
    }
};