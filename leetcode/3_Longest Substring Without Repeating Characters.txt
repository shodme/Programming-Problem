// 解法1：最慢
// 思路：从头开始遍历，记录当前子字符串以及子字符串长度
// 当出现重复字符时，将当前字符串长度与最大字符串长度对比，取最大的那个长度
// 在字符串s中，从出现重复的那个字符的下一个位置重新开始查找   
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        if(s=="")
        {
            return 0;
        }
        
        string temp = "";
        int temp_max_len = 0;
        int max_len = 0;
        int i = 0;
        temp = temp + s[i];
        ++i;
        ++temp_max_len;
        
        while(s[i]!='\0')
        {
            // 判断是s[i]在temp中是否有重复的
            for(int j=0;j<temp_max_len;j++)
            {
                if(s[i]==temp[j])
                {
                    if(temp_max_len>max_len)
                    {
                        max_len = temp_max_len;
                    }
                    // 如果碰到相等的，则从相等的那个字符的下一个重新开始计算
                    i = i-(temp_max_len-j-1);
                    temp_max_len = 0;
                    temp = "";
                    break;
                }
            }
            
            temp = temp + s[i];
            ++i;
            ++temp_max_len;
        }
        if(temp_max_len>max_len)
        {
            max_len = temp_max_len;
        }
        return max_len;
    }
};


// 思路2：使用哈希表
// 建立一个256位大小的数组代表哈希表（ASCII码表能表示256个字符）
// 数组开始都赋值-1，在没遇到重复字符之前，将字符在s中位置赋值到哈希表中
// 起始位置start设为-1，当出现重复数字时，更新哈希表中数字
// 起始位置start也设置为哈希表中数字
// 最大位置就是当前位置-其实起始位置（start设置为-1是因为当i=0时，正好就有一个元素）


class Solution {
public:
int lengthOfLongestSubstring(string s) {
		
		vector<int> dict(256,-1);
		for(int i=0;i<s.length();i++)
		{
			// 有重复数字，起始位置更新成下一个
			if(dict[s[i]]>start)
			{
				start = dict[s[i]];
			}
			dict[s[i]] = i;
			maxlen = max(maxlen,i-start);
		}
};